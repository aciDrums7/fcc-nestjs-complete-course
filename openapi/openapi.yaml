openapi: 3.0.0
paths:
  /api/v1:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
      tags:
        - app
  /api/v1/current-user:
    get:
      operationId: AppController_getProfile
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: number
      tags:
        - app
      security:
        - bearer: []
  /api/v1/songs:
    get:
      operationId: SongsController_findAll
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: limit
          required: true
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - songs
    post:
      operationId: SongsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSongDTO"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
      tags:
        - songs
      security:
        - bearer: []
  /api/v1/songs/{id}:
    get:
      operationId: SongsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
      tags:
        - songs
    put:
      operationId: SongsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSongDTO"
      responses:
        "200":
          description: ""
      tags:
        - songs
      security:
        - bearer: []
    delete:
      operationId: SongsController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - songs
      security:
        - bearer: []
  /api/v1/playlists:
    post:
      operationId: PlaylistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlaylistDTO"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                type: object
      tags:
        - playlists
  /api/v1/auth/signup:
    post:
      operationId: AuthController_signup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - auth
  /api/v1/auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDTO"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                type: object
      tags:
        - auth
  /api/v1/auth/enable-2fa:
    post:
      operationId: AuthController_enable2FA
      parameters: []
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                type: object
      tags:
        - auth
  /api/v1/auth/validate-2fa:
    post:
      operationId: AuthController_validate2FA
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateOtpDTO"
      responses:
        "201":
          description: ""
      tags:
        - auth
  /api/v1/auth/disable-2fa:
    post:
      operationId: AuthController_disable2FA
      parameters: []
      responses:
        "201":
          description: ""
      tags:
        - auth
  /api/v1/auth/validate-api-key:
    get:
      operationId: AuthController_validateApiKey
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - auth
info:
  title: Spotify Clone API
  description: freeCodeCamp - NestJS Complete Course API
  version: "1.0"
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        playlists:
          type: array
          items:
            $ref: "#/components/schemas/Playlist"
      required:
        - id
        - firstName
        - lastName
        - email
        - playlists
    Artist:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        user:
          $ref: "#/components/schemas/User"
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
      required:
        - id
        - name
        - user
        - songs
    Song:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        releaseDate:
          format: date-time
          type: string
        duration:
          format: date-time
          type: string
        lyrics:
          type: string
        playlist:
          $ref: "#/components/schemas/Playlist"
        artists:
          type: array
          items:
            $ref: "#/components/schemas/Artist"
      required:
        - id
        - title
        - releaseDate
        - duration
        - lyrics
        - playlist
        - artists
    Playlist:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
        user:
          $ref: "#/components/schemas/User"
      required:
        - id
        - name
        - songs
        - user
    CreateSongDTO:
      type: object
      properties:
        title:
          type: string
        artistsIds:
          type: array
          items:
            type: number
        releaseDate:
          format: date-time
          type: string
        duration:
          format: date-time
          type: string
        lyrics:
          type: string
      required:
        - title
        - artistsIds
        - releaseDate
        - duration
        - lyrics
    UpdateSongDTO:
      type: object
      properties:
        title:
          type: string
        artistsIds:
          type: array
          items:
            type: number
        releaseDate:
          format: date-time
          type: string
        duration:
          format: date-time
          type: string
        lyrics:
          type: string
      required:
        - title
        - artistsIds
        - releaseDate
        - duration
        - lyrics
    CreatePlaylistDTO:
      type: object
      properties:
        name:
          type: string
        songsIds:
          type: array
          items:
            type: number
        userId:
          type: number
      required:
        - name
        - songsIds
        - userId
    CreateUserDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - password
    LoginDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    ValidateOtpDTO:
      type: object
      properties:
        otp:
          type: string
      required:
        - otp
